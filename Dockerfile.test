# Use an official Python runtime as a parent image
# Using standard variant instead of slim to troubleshoot potential image issues
FROM python:3.11

# Set environment variables
# Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1
# Ensures Python output is sent straight to terminal without buffering
ENV PYTHONUNBUFFERED 1

# Set Airflow home directory (used by Airflow internally)
ENV AIRFLOW_HOME=/opt/airflow
# Set PYTHONPATH to include the project root for module discovery
ENV PYTHONPATH=/app

# Create directories for Airflow (even if not running full Airflow, some libs expect these)
RUN mkdir -p ${AIRFLOW_HOME}/dags ${AIRFLOW_HOME}/plugins ${AIRFLOW_HOME}/logs

# Create app directory
WORKDIR /app

# Install system dependencies needed for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libblas-dev \
    liblapack-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
# Copy only requirements first to leverage Docker layer caching
COPY requirements.txt .
RUN pip install --no-cache-dir cython

# Temporarily commented out for debugging
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy the entire project directory into the container
# (Assumes Dockerfile.test is in the project root)
# Make sure to have a .dockerignore file to exclude unnecessary files/dirs
COPY . .

# Default command to run tests
# Can be overridden when running the container
CMD ["pytest", "-v", "-s", "tests/"]
