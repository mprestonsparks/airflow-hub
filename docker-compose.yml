version: '3'

x-airflow-common:
  &airflow-common
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__WEBSERVER__AUTH_BACKEND: 'airflow.auth.backends.basic_auth'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG
    # Project-specific resource pools
    AIRFLOW__POOLS__PROJECT_TRADING_POOL: '10'
    AIRFLOW__POOLS__PROJECT_ANALYTICS_POOL: '5'
    AIRFLOW__POOLS__PROJECT_MARKET_ANALYSIS_POOL: '5'
    # Enable user site-packages and include local bin for airflow user
    PYTHONNOUSERSITE: 'False'
    PATH: '/home/airflow/.local/bin:${PATH}'
  volumes:
    - ./dags:/opt/airflow/dags:delegated
    - ./plugins:/opt/airflow/plugins:delegated
    - ./logs:/opt/airflow/logs:delegated
    - /var/run/docker.sock:/var/run/docker.sock:rw
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    build:
      context: .
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  vault:
    build:
      context: .
    ports:
      - "${VAULT_PORT}:8200"
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=local
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: server -dev

  airflow-webserver:
    <<: *airflow-common
    build:
      context: .
    command: api-server
    ports:
      - "${AIRFLOW_PORT}:8080"
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    env_file:
      - ../../market-analysis/.env
    environment:
      <<: *airflow-common-env
      AIRFLOW_VAR_BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      AIRFLOW_VAR_BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      AIRFLOW__SECRETS__BACKEND: "airflow.providers.hashicorp.secrets.vault.VaultBackend"
      AIRFLOW__SECRETS__BACKEND_KWARGS: '{"connections_path": "airflow/connections", "variables_path": "airflow/variables", "mount_point": "secret", "url": "http://vault:8200", "token": "dev-only-token"}'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    build:
      context: .
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    command: scheduler
    env_file:
      - ../../market-analysis/.env
    environment:
      <<: *airflow-common-env
      AIRFLOW_VAR_BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      AIRFLOW_VAR_BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      AIRFLOW__SECRETS__BACKEND: "airflow.providers.hashicorp.secrets.vault.VaultBackend"
      AIRFLOW__SECRETS__BACKEND_KWARGS: '{"connections_path": "airflow/connections", "variables_path": "airflow/variables", "mount_point": "secret", "url": "http://vault:8200", "token": "dev-only-token"}'
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  airflow-init:
    <<: *airflow-common
    build:
      context: .
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    env_file:
      - ../../market-analysis/.env
    environment:
      <<: *airflow-common-env
      AIRFLOW_VAR_BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      AIRFLOW_VAR_BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _AIRFLOW_WWW_USER_ROLE: 'Admin'
      _AIRFLOW_AUTH_BACKEND: 'airflow.auth.backends.basic_auth'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "${AIRFLOW_UID:-50000}"
    volumes:
      - .:/sources

  # Project-specific services
  project-trading:
    build:
      context: .
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    volumes:
      - ./plugins:/app/plugins
    command: ["--version"]  # Default command, will be overridden by tasks

  project-analytics:
    build:
      context: .
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    volumes:
      - ./plugins:/app/plugins
    command: ["--version"]  # Default command, will be overridden by tasks

  # Service for running DAG tests in an isolated Python 3.9 environment
  airflow-test:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow-test
    platform: "${DOCKER_DEFAULT_PLATFORM}"
    environment:
      <<: *airflow-common-env
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    depends_on:
      <<: *airflow-common-depends-on
    volumes:
      - .:/opt/airflow
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init && \
        pytest tests/ -q

volumes:
  postgres-db-volume:
  baseline_logs:
