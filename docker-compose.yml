version: '3'

x-airflow-common:
  &airflow-common
  image: apache/airflow:3.0.0-python3.11
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__WEBSERVER__AUTH_BACKEND: 'airflow.auth.backends.basic_auth'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG
    # Project-specific resource pools
    AIRFLOW__POOLS__PROJECT_TRADING_POOL: '10'
    AIRFLOW__POOLS__PROJECT_ANALYTICS_POOL: '5'
  volumes:
    - ./dags:/opt/airflow/dags:delegated
    - ./plugins:/opt/airflow/plugins:delegated
    - ./logs:/opt/airflow/logs:delegated
    - /var/run/docker.sock:/var/run/docker.sock:rw
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    env_file:
      - ../market-analysis/.env # Load secrets from market-analysis repo
    environment:
      <<: *airflow-common-env
      AIRFLOW_VAR_BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      AIRFLOW_VAR_BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    env_file:
      - ../market-analysis/.env # Load secrets from market-analysis repo
    environment:
      <<: *airflow-common-env
      AIRFLOW_VAR_BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      AIRFLOW_VAR_BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  airflow-init:
    <<: *airflow-common
    env_file:
      - ../market-analysis/.env # Load secrets from market-analysis repo
    environment:
      <<: *airflow-common-env
      AIRFLOW_VAR_BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      AIRFLOW_VAR_BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _AIRFLOW_WWW_USER_ROLE: 'Admin'
      _AIRFLOW_AUTH_BACKEND: 'airflow.auth.backends.basic_auth'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "${AIRFLOW_UID:-50000}"
    volumes:
      - .:/sources

  # Project-specific services
  project-trading:
    build:
      context: .
      dockerfile: docker/project_specific/Dockerfile.project_trading
    volumes:
      - ./plugins:/app/plugins
    command: ["--version"]  # Default command, will be overridden by tasks

  project-analytics:
    build:
      context: .
      dockerfile: docker/project_specific/Dockerfile.project_analytics
    volumes:
      - ./plugins:/app/plugins
    command: ["--version"]  # Default command, will be overridden by tasks

volumes:
  postgres-db-volume:
